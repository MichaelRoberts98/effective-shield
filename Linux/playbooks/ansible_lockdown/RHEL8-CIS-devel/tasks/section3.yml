---
- name: "SCORED | 3.1.1 | PATCH | Ensure IP forwarding is disabled"
  block:
      - name: "SCORED | 3.1.1 | PATCH | Ensure IP forwarding is disabled | Disable IPv4 forwarding"
        sysctl:
            name: '{{ item.name }}'
            value: '{{ item.value }}'
            state: present
            reload: yes
            ignoreerrors: yes
        with_items:
            - { name: net.ipv4.ip_forward, value: 0 }
            - { name: net.ipv4.route.flush, value: 1}

        notify:
            - sysctl flush ipv4 route table

      - name: "SCORED | 3.1.1 | PATCH | Ensure IP forwarding is disabled | Disable IPv6 forwarding"
        sysctl:
            name: '{{ item.name }}'
            value: '{{ item.value }}'
            state: present
            reload: yes
            ignoreerrors: yes
        with_items:
            - { name: net.ipv6.conf.all.forwarding, value: 0 }
            - { name: net.ipv6.route.flush, value: 1}
        when:
            - rhel8cis_ipv6_required
        notify:
            - sysctl flush ipv6 route table
  when:
      - not rhel8cis_is_router
      - rhel8cis_rule_3_1_1
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.1.1

- name: "SCORED | 3.1.2 | PATCH | Ensure packet redirect sending is disabled"
  sysctl:
      name: '{{ item.name }}'
      value: '{{ item.value }}'
      sysctl_set: yes
      state: present
      reload: yes
      ignoreerrors: yes
  with_items:
      - { name: net.ipv4.conf.all.send_redirects, value: 0 }
      - { name: net.ipv4.conf.default.send_redirects, value: 0 }
  notify:
      - sysctl flush ipv4 route table
  when:
      - not rhel8cis_is_router
      - rhel8cis_rule_3_1_2
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.1.2

- name: "SCORED | 3.2.1 | PATCH | Ensure source routed packets are not accepted"
  block:
      - name: "SCORED | 3.2.1 | PATCH | Ensure source routed packets are not accepted | Set routed packets IPv4"
        sysctl:
            name: '{{ item.name }}'
            value: '{{ item.value }}'
            sysctl_set: yes
            state: present
            reload: yes
            ignoreerrors: yes
        with_items:
            - { name: net.ipv4.conf.all.accept_source_route, value: 0 }
            - { name: net.ipv4.conf.default.accept_source_route, value: 0 }
        notify:
            - sysctl flush ipv4 route table

      - name: "SCORED | 3.2.1 | PATCH | Ensure source routed packets are not accepted | Set routed packets IPv6"
        command: "{{ item }}"
        with_items:
            - sysctl -w net.ipv6.conf.all.accept_source_route=0
            - sysctl -w net.ipv6.conf.default.accept_source_route=0
        notify:
            - sysctl flush ipv4 route table
  # - name: "SCORED | 3.2.1 | PATCH | Ensure source routed packets are not accepted | Set routed packets IPv6"
  #   sysctl:
  #       name: '{{ item.name }}'
  #       value: '{{ item.name }}'
  #       sysctl_set: yes
  #       reload: yes
  #       ignoreerrors: yes
  #   with_items:
  #       - { name: net.ipv6.conf.all.accept_source_route, value: 0}
  #       - { name: net.ipv6.conf.default.accept_source_route, value: 0 }
  #   when:
  #       - rhel8cis_ipv6_required
  #   notify:
  #       - sysctl flush ipv6 route table
  when:
      - rhel8cis_rule_3_2_1
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.1

- name: "SCORED | 3.2.2 | PATCH | Ensure ICMP redirects are not accepted"
  block:
      - name: "SCORED | 3.2.2 | PATCH | Ensure ICMP redirects are not accepted | Set ICMP redirects IPv4"
        sysctl:
            name: '{{ item.name }}'
            value: '{{ item.value }}'
            sysctl_set: yes
            state: present
            reload: yes
            ignoreerrors: yes
        with_items:
            - { name: net.ipv4.conf.all.accept_redirects, value: 0 }
            - { name: net.ipv4.conf.default.accept_redirects, value: 0 }
        notify:
            - sysctl flush ipv4 route table

      - name: "SCORED | 3.2.2 | PATCH | Ensure ICMP redirects are not accepted | Set ICMP redirects IPv6"
        sysctl:
            name: '{{ item.name }}'
            value: '{{ item.value }}'
            sysctl_set: yes
            state: present
            reload: yes
            ignoreerrors: yes
        with_items:
            - { name: net.ipv6.conf.all.accept_redirects, value: 0 }
            - { name: net.ipv6.conf.default.accept_redirects, value: 0 }
        notify:
            - sysctl flush ipv6 route table
        when:
            - rhel8cis_ipv6_required
  when:
      - rhel8cis_rule_3_2_2
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.2

- name: "SCORED | 3.2.3 | PATCH | Ensure secure ICMP redirects are not accepted"
  sysctl:
      name: '{{ item.name }}'
      value: '{{ item.value }}'
      sysctl_set: yes
      state: present
      reload: yes
      ignoreerrors: yes
  with_items:
      - { name: net.ipv4.conf.all.secure_redirects, value: 0 }
      - { name: net.ipv4.conf.default.secure_redirects, value: 0 }
  notify:
      - sysctl flush ipv4 route table
  when:
      - rhel8cis_rule_3_2_3
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.3

- name: "SCORED | 3.2.4 | PATCH | Ensure suspicious packets are logged"
  sysctl:
      name: '{{ item.name }}'
      value: '{{ item.value }}'
      sysctl_set: yes
      state: present
      reload: yes
      ignoreerrors: yes
  with_items:
      - { name: net.ipv4.conf.all.log_martians, value: 1 }
      - { name: net.ipv4.conf.default.log_martians, value: 1 }
  notify:
      - sysctl flush ipv4 route table
  when:
      - rhel8cis_rule_3_2_4
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.4

- name: "SCORED | 3.2.5 | PATCH | Ensure broadcast ICMP requests are ignored"
  sysctl:
      name: net.ipv4.icmp_echo_ignore_broadcasts
      value: '1'
      state: present
      reload: yes
      ignoreerrors: yes
  notify:
      - sysctl flush ipv4 route table
  when:
      - rhel8cis_rule_3_2_5
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.5

- name: "SCORED | 3.2.6 | PATCH | Ensure bogus ICMP responses are ignored"
  sysctl:
      name: net.ipv4.icmp_ignore_bogus_error_responses
      value: '1'
      state: present
      reload: yes
      ignoreerrors: yes
  notify:
      - sysctl flush ipv4 route table
  when:
      - rhel8cis_rule_3_2_6
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.6

- name: "SCORED | 3.2.7 | PATCH | Ensure Reverse Path Filtering is enabled"
  sysctl:
      name: net.ipv4.conf.default.rp_filter
      value: 1
      sysctl_set: yes
      state: present
      reload: yes
      ignoreerrors: yes
  notify:
      - sysctl flush ipv4 route table
  when:
      - rhel8cis_rule_3_2_7
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.7

- name: "SCORED | 3.2.8 | PATCH | Ensure TCP SYN Cookies is enabled"
  sysctl:
      name: net.ipv4.tcp_syncookies
      value: 1
      state: present
      reload: yes
      ignoreerrors: yes
  notify:
      - sysctl flush ipv4 route table
  when:
      - rhel8cis_rule_3_2_8
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.8

- name: "SCORED | 3.2.9 | PATCH | Ensure IPv6 router advertisements are not accepted"
  sysctl:
      name: '{{ item.name }}'
      value: '{{ item.value }}'
      sysctl_set: yes
      state: present
      reload: yes
      ignoreerrors: yes
  with_items:
      - { name: net.ipv6.conf.all.accept_ra, value: 0 }
      - { name: net.ipv6.conf.default.accept_ra, value: 0 }
  notify:
      - sysctl flush ipv6 route table
  when:
      - rhel8cis_ipv6_required
      - rhel8cis_rule_3_2_9
  tags:
      - level1
      - sysctl
      - patch
      - rule_3.2.9

- name: "SCORED | 3.3.1 | PATCH | Ensure DCCP is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install dccp(\\s|$)"
      line: "install dccp /bin/true"
      create: yes
  when:
      - rhel8cis_rule_3_3_1
  tags:
      - level2
      - patch
      - rule_3.3.1

- name: "SCORED | 3.3.2 | PATCH | Ensure SCTP is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install sctp(\\s|$)"
      line: "install sctp /bin/true"
      create: yes
  when:
      - rhel8cis_rule_3_3_2
  tags:
      - level2
      - patch
      - rule_3.3.2

- name: "SCORED | 3.3.3 | PATCH | Ensure RDS is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install rds(\\s|$)"
      line: "install rds /bin/true"
      create: yes
  when:
      - rhel8cis_rule_3_3_3
  tags:
      - level2
      - patch
      - rule_3.3.3

- name: "SCORED | 3.4.1.1 | PATCH | Ensure a Firewall package is installed"
  dnf:
      name: "{{ rhel8cis_firewall }}"
      state: present
  become: true
  notify: restart {{ rhel8cis_firewall }}
  when:
      - rhel8cis_firewall == "firewalld"
      - rhel8cis_rule_3_4_1_1
  tags:
      - level1
      - patch
      - rule_3.4.1.1

- name: "SCORED | 3.4.2.1 | PATCH | Ensure firewalld service is enabled and running"
  service:
      name: firewalld
      state: started
      enabled: yes
  become: true
  when:
      - rhel8cis_firewall == "firewalld"
      - rhel8cis_rule_3_4_2_1
  tags:
      - level1
      - patch
      - rule_3_4_2_1

# I converted this to a command module from service since I was getting errors trying to disable the service with that module. I need to revisit
- name: "SCORED | 3.4.2.2 | PATCH | Ensure iptables is not enabled"
  command: systemctl --now mask iptables
  when:
      - rhel8cis_firewall == "firewalld"
      - rhel8cis_rule_3_4_2_2
  tags:
      - level1
      - patch
      - rule_3_4_2_2

- name: "SCORED | 3.4.2.3 | PATCH | Ensure nftables is not enabled"
  service:
      name: nftables
      state: stopped
      enabled: no
  when:
      - rhel8cis_firewall == "firewalld"
      - rhel8cis_rule_3_4_2_3
  tags:
      - level1
      - patch
      - rule_3_4_2_3

- name: "SCORED | 3.4.2.4 | PATCH | Ensure default zone is set"
  command: firewall-cmd --set-default-zone="{{ rhel8cis_default_zone }}"
  when:
      - rhel8cis_firewall == "firewalld"
      - rhel8cis_rule_3_4_2_4
  tags:
      - level1
      - patch
      - rule_3.4.2.4

- name: "SCORED | 3.4.2.5 | AUDIT | Ensure network interfaces are assigned to appropriate zone"
  block:
      - name: "SCORED | 3.4.2.5 | AUDIT | Ensure network interfaces are assigned to appropriate zone | Get list of interfaces and polocies"
        shell: "nmcli -t connection show | awk -F: '{ if($4){print $4} }' | while read INT; do firewall-cmd --get-active-zones | grep -B1 $INT; done"
        register: rhel8cis_3_4_2_5_interfacepolicy
        become: yes

      - name: "SCORED | 3.4.2.5 | AUDIT | Ensure network interfaces are assigned to appropriate zone | Get list of interfaces and polocies | Show the interface to policy"
        debug:
            msg:
                - "The items below are the policies tied to the interfaces, please correct as needed"
                - "{{ rhel8cis_3_4_2_5_interfacepolicy.stdout_lines }}"
  when:
      - rhel8cis_firewall == "firewalld"
      - rhel8cis_rule_3_4_2_5
  tags:
      - level1
      - audit
      - rule_3.4.2.5

- name: "SCORED | 3.4.2.6 | AUDIT | Ensure unnecessary services and ports are not accepted"
  block:
      - name: "SCORED | 3.4.2.6 | AUDIT | Ensure unnecessary services and ports are not accepted | Get list of services and ports"
        shell: "firewall-cmd --get-active-zones | awk '!/:/ {print $1}' | while read ZN; do firewall-cmd --list-all --zone=$ZN; done"
        register: rhel8cis_3_4_2_6_servicesport
        become: true

      - name: "SCORED | 3.4.2.6 | AUDIT | Ensure unnecessary services and ports are not accepted | Show services adn ports"
        debug:
            msg:
                - "The items below are the services and ports that are accepted, please correct as needed"
                - "{{ rhel8cis_3_4_2_6_servicesport.stdout_lines }}"
  when:
      - rhel8cis_firewall == "firewalld"
      - rhel8cis_rule_3_4_2_6
  tags:
      - level1
      - audit
      - rule_3.4.2.6

- name: "NOTSCORED | 3.4.3.1 | PATCH | Ensure iptables are flushed"
  block:
      - name: "NOTSCORED | 3.4.3.1 | PATCH | Ensure iptables are flushed | Flush IPv4 tables"
        command: iptables -F
        become: yes

      - name: "NOTSCORED | 3.4.3.1 | PATCH | Ensure iptables are flushed | Flush IPv6 tables"
        command: ip6tables -F
        become: yes
        when:
            - rhel8cis_ipv6_required
  when:
      - rhel8cis_firewall != "iptables"
      - rhel8cis_rule_3_4_3_1
  tags:
      - level1
      - patch
      - rule_3.4.3.1

- name: "SCORED | 3.4.3.2 | PATCH | Ensure a table exists"
  block:
      - name: "SCORED | 3.4.3.2 | AUDIT | Ensure a table exists | Check for tables"
        command: nft list tables
        become: true
        register: rhel8cis_3_4_3_2_nft_tables

      - name: "SCORED | 3.4.3.2 | AUDIT | Ensure a table exists | Show existing tables"
        debug:
            msg:
                - "Below are the current nft tables, please review"
                - "{{ rhel8cis_3_4_3_2_nft_tables.stdout_lines }}"
        when:
            - rhel8cis_3_4_3_2_nft_tables.stdout != ""

      - name: "SCORED | 3.4.3.2 | AUDIT | Ensure a table exists | Alert on no tables"
        debug:
            msg:
                - "Warning! You currently have no nft tables, please review your setup"
                - 'Use the command "nft create table inet <table name>" to create a new table'
        when:
            - rhel8cis_3_4_3_2_nft_tables.stdout == ""
            - not rhel8cis_nft_tables_autoNewTable

      - name: "SCORED | 3.4.3.2 | PATCH | Ensure a table exists | Create table if needed"
        command: nft create table inet "{{ rhel8cis_nft_tables_tableName }}"
        become: true
        failed_when: no
        when:
            - rhel8cis_nft_tables_autoNewTable
  when:
      - rhel8cis_firewall == "nftables"
      - rhel8cis_rule_3_4_3_2
  tags:
      - level1
      - patch
      - rule_3.4.3.2

- name: "SCORED | 3.4.3.3 | PATCH | Ensure base chains exist"
  block:
      - name: "SCORED | 3.4.3.3 | AUDIT | Ensure base chains exist | Get current chains for INPUT"
        shell: nft list ruleset | grep 'hook input'
        become: true
        register: rhel8cis_3_4_3_3_input_chains

      - name: "SCORED | 3.4.3.3 | AUDIT | Ensure base chains exist | Get current chains for FORWARD"
        shell: nft list ruleset | grep 'hook forward'
        become: true
        register: rhel8cis_3_4_3_3_forward_chains

      - name: "SCORED | 3.4.3.3 | AUDIT | Ensure base chains exist | Get current chains for OUTPUT"
        shell: nft list ruleset | grep 'hook output'
        become: true
        register: rhel8cis_3_4_3_3_output_chains

      - name: "SCORED | 3.4.3.3 | AUDIT | Ensure base chains exist | Display chains for review"
        debug:
            msg:
                - "Below are the current INPUT chains"
                - "{{ rhel8cis_3_4_3_3_input_chains.stdout_lines }}"
                - "Below are the current FORWARD chains"
                - "{{ rhel8cis_3_4_3_3_forward_chains.stdout_lines }}"
                - "Below are teh current OUTPUT chains"
                - "{{ rhel8cis_3_4_3_3_output_chains.stdout_lines }}"
        when:
            - not rhel8cis_nft_tables_autoChainCreate

      - name: "SCORED | 3.4.3.3 | PATCH | Ensure base chains exist | Create chains if needed"
        shell: "{{ item }}"
        become: true
        failed_when: no
        with_items:
            - nft create chain inet "{{ rhel8cis_nft_tables_tableName }}" input { type filter hook input priority 0 \; }
            - nft create chain inet "{{ rhel8cis_nft_tables_tableName }}" forward { type filter hook forward priority 0 \; }
            - nft create chain inet "{{ rhel8cis_nft_tables_tableName }}" output { type filter hook output priority 0 \; }
        when:
            - rhel8cis_nft_tables_autoChainCreate
  when:
      - rhel8cis_firewall == "nftables"
      - rhel8cis_rule_3_4_3_2
  tags:
      - level1
      - patch
      - rule_3.4.3.3

- name: "SCORED | 3.4.3.4 | PATCH | Ensure loopback traffic is configured"
  block:
      - name: "SCORED | 3.4.3.4 | AUDIT | Ensure loopback traffic is configured | Gather iif lo accept existence"
        shell: nft list ruleset | awk '/hook input/,/}/' | grep 'iif "lo" accept'
        become: true
        register: rhel8cis_3_4_3_4_iiflo
        changed_when: no
        failed_when: no

      - name: "SCORED | 3.4.3.4 | AUDIT | Ensure loopback traffic is configured | Gather ip saddr existence"
        shell: nft list ruleset | awk '/hook input/,/}/' | grep 'ip saddr'
        become: true
        register: rhel8cis_3_4_3_4_ipsaddr
        changed_when: no
        failed_when: no

      - name: "SCORED | 3.4.3.4 | AUDIT | Ensure loopback traffic is configured | Gather ip6 saddr existence"
        shell: nft list ruleset | awk '/hook input/,/}/' | grep 'ip6 saddr'
        become: true
        register: rhel8cis_3_4_3_4_ip6saddr
        changed_when: no
        failed_when: no

      - name: "SCORED | 3.4.3.4 | PATCH | Ensure loopback traffic is configured | Set iif lo accept rule"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" input iif lo accept
        become: true
        when:
            - '"iif \"lo\" accept" not in rhel8cis_3_4_3_4_iiflo.stdout'

      - name: "SCORED | 3.4.3.4 | PATCH | Ensure loopback traffic is configured | Set ip sddr rule"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" input ip saddr 127.0.0.0/8 counter drop
        become: true
        when:
            - '"ip saddr 127.0.0.0/8 counter packets 0 bytes 0 drop" not in rhel8cis_3_4_3_4_ipsaddr.stdout'

      - name: "SCORED | 3.4.3.4 | PATCH | Ensure loopback traffic is configured | Set ip6 saddr rule"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" input ip6 saddr ::1 counter drop
        become: true
        when:
            - '"ip6 saddr ::1 counter packets 0 bytes 0 drop" not in rhel8cis_3_4_3_4_ip6saddr.stdout'
  when:
      - rhel8cis_firewall == "nftables"
      - rhel8cis_rule_3_4_3_4
  tags:
      - level1
      - patch
      - rule_3.4.3.4

- name: "NOTSCORED | 3.4.3.5 | PATCH | Ensure outbound and established connections are configured"
  block:
      - name: "NOTSCORED | 3.4.3.5 | AUDIT | Ensure outbound and established connections are configured | Gather incoming connection rules"
        shell: nft list ruleset | awk '/hook input/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state'
        become: true
        register: rhel8cis_3_4_3_5_inconnectionrule
        changed_when: no
        failed_when: no

      - name: "NOTSCORED | 3.4.3.5 | AUDIT | Ensure outbound and established connections are configured | Gather outbound connection rules"
        shell: nft list ruleset | awk '/hook output/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state'
        become: true
        register: rhel8cis_3_4_3_5_outconnectionrule
        changed_when: no
        failed_when: no

      - name: "NOTSCORED | 3.4.3.5 | PATCH | Ensure outbound and established connections are configured | Add input tcp established accpet policy"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" input ip protocol tcp ct state established accept
        become: true
        when:
            - '"ip protocol tcp ct state established accept" not in rhel8cis_3_4_3_5_inconnectionrule.stdout'

      - name: "NOTSCORED | 3.4.3.5 | PATCH | Ensure outbound and established connections are configured | Add input udp established accpet policy"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" input ip protocol udp ct state established accept
        become: true
        when:
            - '"ip protocol udp ct state established accept" not in rhel8cis_3_4_3_5_inconnectionrule.stdout'

      - name: "NOTSCORED | 3.4.3.5 | PATCH | Ensure outbound and established connections are configured | Add input icmp established accpet policy"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" input ip protocol icmp ct state established accept
        become: true
        when:
            - '"ip protocol icmp ct state established accept" not in rhel8cis_3_4_3_5_inconnectionrule.stdout'

      - name: "NOTSCORED | 3.4.3.5 | PATCH | Ensure outbound and established connections are configured | Add output tcp new, related, established accpet policy"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" output ip protocol tcp ct state new,related,established accept
        become: true
        when:
            - '"ip protocol tcp ct state established,related,new accept" not in rhel8cis_3_4_3_5_outconnectionrule.stdout'

      - name: "NOTSCORED | 3.4.3.5 | PATCH | Ensure outbound and established connections are configured | Add output udp new, related, established accpet policy"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" output ip protocol udp ct state new,related,established accept
        become: true
        when:
            - '"ip protocol udp ct state established,related,new accept" not in rhel8cis_3_4_3_5_outconnectionrule.stdout'

      - name: "NOTSCORED | 3.4.3.5 | PATCH | Ensure outbound and established connections are configured | Add output icmp new, related, established accpet policy"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" output ip protocol icmp ct state new,related,established accept
        become: true
        when:
            - '"ip protocol icmp ct state established,related,new accept" not in rhel8cis_3_4_3_5_outconnectionrule.stdout'
  when:
      - rhel8cis_firewall == "nftables"
      - rhel8cis_rule_3_4_3_5
  tags:
      - level1
      - patch
      - rule_3.4.3.5

- name: "SCORED | 3.4.3.6 | PATCH | Ensure default deny firewall policy"
  block:
      - name: "SCORED | 3.4.3.6 | AUDIT | Ensure default deny firewall policy | Check for hook input deny policy"
        shell: nft list table inet "{{ rhel8cis_nft_tables_tableName }}" | grep 'hook input'
        become: true
        failed_when: no
        changed_when: no
        register: rhel8cis_3_4_3_6_inputpolicy

      - name: "SCORED | 3.4.3.6 | AUDIT | Ensure default deny firewall policy | Check for hook forward deny policy"
        shell: nft list table inet "{{ rhel8cis_nft_tables_tableName }}" | grep 'hook forward'
        become: true
        failed_when: no
        changed_when: no
        register: rhel8cis_3_4_3_6_forwardpolicy

      - name: "SCORED | 3.4.3.6 | AUDIT | Ensure default deny firewall policy | Check for hook output deny policy"
        shell: nft list table inet "{{ rhel8cis_nft_tables_tableName }}" | grep 'hook output'
        become: true
        failed_when: no
        changed_when: no
        register: rhel8cis_3_4_3_6_outputpolicy

      - name: "SCORED | 3.4.3.6 | AUDIT | Ensure default deny firewall policy | Check for SSH allow"
        shell: nft list table inet "{{ rhel8cis_nft_tables_tableName }}" | grep 'ssh'
        become: true
        failed_when: no
        changed_when: no
        register: rhel8cis_3_4_3_6_sshallowcheck

      - name: "SCORED | 3.4.3.6 | PATCH | Ensure default deny firewall policy | Enable SSH traffic"
        command: nft add rule inet "{{ rhel8cis_nft_tables_tableName }}" input tcp dport ssh accept
        become: true
        when:
            - '"tcp dport ssh accept" not in rhel8cis_3_4_3_6_sshallowcheck.stdout'

      - name: "SCORED | 3.4.3.6 | PATCH | Ensure default deny firewall policy | Set hook input deny policy"
        command: nft chain inet "{{ rhel8cis_nft_tables_tableName }}" input { policy drop \; }
        become: true
        when:
            - '"type filter hook input priority 0; policy drop;" not in rhel8cis_3_4_3_6_inputpolicy.stdout'

      - name: "SCORED | 3.4.3.6 | PATCH | Ensure default deny firewall policy | Create hook forward deny policy"
        command: nft chain inet "{{ rhel8cis_nft_tables_tableName }}" forward { policy drop \; }
        become: true
        when:
            - '"type filter hook forward priority 0; policy drop;" not in rhel8cis_3_4_3_6_forwardpolicy.stdout'

      - name: "SCORED | 3.4.3.6 | PATCH | Ensure default deny firewall policy | Create hook output deny policy"
        command: nft chain inet "{{ rhel8cis_nft_tables_tableName }}" output { policy drop \; }
        become: true
        when:
            - '"type filter hook output priority 0; policy drop;" not in rhel8cis_3_4_3_6_outputpolicy.stdout'
  when:
      - rhel8cis_firewall == "nftables"
      - rhel8cis_rule_3_4_3_6
  tags:
      - level1
      - patch
      - rule_3.4.3.6

- name: "SCORED | 3.4.3.7 | PATCH | Ensure nftables service is enabled | Check if nftables is enabled"
  service:
      name: nftables
      enabled: yes
  become: true
  when:
      - rhel8cis_firewall == "nftables"
      - rhel8cis_rule_3_4_3_7
  tags:
      - level1
      - patch
      - rule_3.4.3.7

- name: "SCORED | 3.4.3.8 | PATCH | Ensure nftables rules are permanent"
  lineinfile:
      path: /etc/sysconfig/nftables.conf
      state: present
      insertafter: EOF
      line: include "/etc/nftables/inet-{{ rhel8cis_nft_tables_tableName }}"
  become: true
  when:
      - rhel8cis_firewall == "nftables"
      - rhel8cis_rule_3_4_3_7
  tags:
      - level1
      - patch
      - rule_3.4.3.8

- name: "SCORED | 3.4.4.1.1 | PATCH | Ensure default deny firewall policy"
  block:
      - name: "SCORED | 3.4.4.1.1 | PATCH | Ensure default deny firewall policy | Configure ssh to be allowed"
        iptables:
            chain: INPUT
            protocol: tcp
            destination_port: "22"
            jump: ACCEPT

      - name: "SCORED | 3.4.4.1.1 | PATCH | Ensure default deny firewall policy | Set drop items"
        iptables:
            policy: DROP
            chain: "{{ item }}"
        with_items:
            - INPUT
            - FORWARD
            - OUTPUT
  when:
      - rhel8cis_rule_3_4_4_1_1
      - rhel8cis_firewall == "iptables"
  tags:
      - level1
      - patch
      - rule_3.4.4.1.1

- name: "SCORED | 3.4.4.1.2 | PATCH | Ensure loopback traffic is configured"
  block:
      - name: "SCORED | 3.4.4.1.2 | PATCH | Ensure loopback traffic is configured | INPUT Loopback ACCEPT"
        iptables:
            action: append
            chain: INPUT
            in_interface: lo
            jump: ACCEPT

      - name: "SCORED | 3.4.4.1.2 | PATCH | Ensure loopback traffic is configured | OUTPUT Loopback ACCEPT"
        iptables:
            action: append
            chain: OUTPUT
            out_interface: lo
            jump: ACCEPT

      - name: "SCORED | 3.4.4.1.2 | PATCH | Ensure loopback traffic is configured | INPUT Loopback 127.0.0.0/8"
        iptables:
            action: append
            chain: INPUT
            source: 127.0.0.0/8
            jump: DROP
  when:
      - rhel8cis_firewall == "iptables"
      - rhel8cis_rule_3_4_4_1_2
  tags:
      - level1
      - patch
      - rule_3.4.4.1.2

- name: "NOTSCORED | 3.4.4.1.3 | PATCH | Ensure outbound and established connections are configured"
  iptables:
      action: append
      chain: '{{ item.chain }}'
      protocol: '{{ item.protocol }}'
      match: state
      ctstate: '{{ item.ctstate }}'
      jump: ACCEPT
  with_items:
      - { chain: OUTPUT, protocol: tcp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: udp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: icmp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: INPUT, protocol: tcp, ctstate: ESTABLISHED }
      - { chain: INPUT, protocol: udp, ctstate: ESTABLISHED }
      - { chain: INPUT, protocol: icmp, ctstate: ESTABLISHED }
  when:
      - rhel8cis_firewall == "iptables"
      - rhel8cis_rule_3_4_4_1_3
  tags:
      - level1
      - patch
      - rule_3.4.4.1.3

- name: "SCORED | 3.4.4.1.4 | PATCH | Ensure firewall rules exist for all open ports"
  block:
      - name: "SCORED | 3.4.4.1.4 | AUDIT | Ensure firewall rules exist for all open ports | Get list of TCP open ports"
        shell: netstat -ant |grep "tcp.*LISTEN" | awk '{ print $4 }'| sed 's/.*://'
        become: yes
        register: rhel8cis_3_4_4_1_4_otcp

      - name: "SCORED | 3.4.4.1.4| AUDIT | Ensure firewall rules exist for all open ports | Get the list of udp open ports"
        shell: netstat -ant |grep "udp.*LISTEN" | awk '{ print $4 }'| sed 's/.*://'
        become: yes
        register: rhel8cis_3_4_4_1_4_oudp

      - name: "SCORED | 3.4.4.1.4 | PATCH | Ensure firewall rules exist for all open ports| Adjust open tcp ports"
        iptables:
            action: append
            chain: INPUT
            protocol: tcp
            destination_port: "{{ item }}"
            match: state
            ctstate: NEW
            jump: ACCEPT
        with_items:
            - "{{ rhel8cis_3_4_4_1_4_otcp.stdout_lines }}"
        when:
            - rhel8cis_3_4_4_1_4_otcp.stdout is defined

      - name: "SCORED | 3.4.4.1.4 | PATCH | Ensure firewall rules exist for all open ports | Adjust open udp ports"
        iptables:
            action: append
            chain: INPUT
            protocol: udp
            destination_port: "{{ item }}"
            match: state
            ctstate: NEW
            jump: ACCEPT
        with_items:
            - "{{ rhel8cis_3_4_4_1_4_oudp.stdout_lines }}"
        when:
            - rhel8cis_3_4_4_1_4_otcp.stdout is defined
  when:
      - rhel8cis_firewall == "iptables"
      - rhel8cis_rule_3_4_4_1_4
  tags:
      - level1
      - patch
      - rule_3.4.4.1.4

- name: "SCORED | 3.4.4.2.1 | PATCH | Ensure IPv6 default deny firewall policy"
  block:
      - name: "SCORED | 3.4.4.2.1 | PATCH | Ensure IPv6 default deny firewall policy | Configure ssh to be allowed"
        iptables:
            chain: INPUT
            protocol: tcp
            destination_port: "22"
            jump: ACCEPT
            ip_version: ipv6
        become: true

      - name: "SCORED | 3.4.4.2.1 | PATCH | Ensure IPv6 default deny firewall policy | Set drop items"
        iptables:
            policy: DROP
            chain: "{{ item }}"
            ip_version: ipv6
        become: true
        with_items:
            - INPUT
            - FORWARD
            - OUTPUT
  when:
      - rhel8cis_firewall == "iptables"
      - rhel8cis_rule_3_4_4_2_1
      - rhel8cis_ipv6_required
  tags:
      - level1
      - patch
      - rule_3.4.4.2.1

- name: "SCORED | 3.4.4.2.2 | PATCH | Ensure IPv6 loopback traffic is configured"
  block:
      - name: "SCORED | 3.4.4.2.2 | PATCH | Ensure IPv6 loopback traffic is configured | INPUT Loopback ACCEPT"
        iptables:
            action: append
            chain: INPUT
            in_interface: lo
            jump: ACCEPT
            ip_version: ipv6
        become: true

      - name: "SCORED | 3.4.4.2.2 | PATCH | Ensure IPv6 loopback traffic is configured | OUTPUT Loopback ACCEPT"
        iptables:
            action: append
            chain: OUTPUT
            out_interface: lo
            jump: ACCEPT
            ip_version: ipv6
        become: true

      - name: "SCORED | 3.4.4.2.2 | PATCH | Ensure IPv6 loopback traffic is configured | INPUT Loopback 127.0.0.0/8"
        iptables:
            action: append
            chain: INPUT
            source: ::1
            jump: DROP
            ip_version: ipv6
        become: true
  when:
      - rhel8cis_firewall == "iptables"
      - rhel8cis_rule_3_4_4_2_2
      - rhel8cis_ipv6_required
  tags:
      - level1
      - patch
      - rule_3.4.4.2.2

- name: "NOTSCORED | 3.4.4.2.3 | PATCH | Ensure IPv6 outbound and established connections are configured"
  iptables:
      action: append
      chain: '{{ item.chain }}'
      protocol: '{{ item.protocol }}'
      match: state
      ctstate: '{{ item.ctstate }}'
      jump: ACCEPT
      ip_version: ipv6
  become: true
  with_items:
      - { chain: OUTPUT, protocol: tcp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: udp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: icmp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: INPUT, protocol: tcp, ctstate: ESTABLISHED }
      - { chain: INPUT, protocol: udp, ctstate: ESTABLISHED }
      - { chain: INPUT, protocol: icmp, ctstate: ESTABLISHED }
  when:
      - rhel8cis_firewall == "iptables"
      - rhel8cis_rule_3_4_4_2_3
      - rhel8cis_ipv6_required
  tags:
      - level1
      - patch
      - rule_3.4.4.2.3

- name: "NOTSCORED | 3.4.4.2.4 | PATCH | Ensure IPV6 firewall rules exist for all open ports"
  block:
      - name: "NOTSCORED | 3.4.4.2.4 | AUDIT | Ensure IPv6 firewall rules exist for all open ports | Get list of TCP6 open ports"
        shell: netstat -ant |grep "tcp6.*LISTEN" | awk '{ print $4 }'| sed 's/.*://'
        become: yes
        register: rhel8cis_3_4_4_2_4_otcp

      - name: "NOTSCORED | 3.4.4.2.4 | PATCH | Ensure IPv6 firewall rules exist for all open ports| Adjust open tcp6 ports"
        iptables:
            action: append
            chain: INPUT
            protocol: tcp
            destination_port: "{{ item }}"
            match: state
            ctstate: NEW
            jump: ACCEPT
            ip_version: ipv6
        become: true
        with_items:
            - "{{ rhel8cis_3_4_4_2_4_otcp.stdout_lines }}"
        when:
            - rhel8cis_3_4_4_2_4_otcp.stdout is defined
  when:
      - rhel8cis_firewall == "iptables"
      - rhel8cis_rule_3_4_4_2_4
      - rhel8cis_ipv6_required
  tags:
      - level1
      - patch
      - rule_3.4.4.2.4

- name: "SCORED | 3.5 | PATCH | Ensure wireless interfaces are disabled"
  block:
      - name: "SCORED | 3.5 | AUDIT | Ensure wireless interfaces are disabled | Check if nmcli command is available"
        command: rpm -q NetworkManager
        args:
            warn: no
        check_mode: no
        changed_when: no
        become: true
        register: rhel_08_nmcli_available
        failed_when: no

      - name: "SCORED | 3.5 | AUDIT | Ensure wireless interfaces are disabled | Check if wifi is enabled"
        command: nmcli radio all
        register: rhel_08_wifi_enabled
        check_mode: no
        become: true
        changed_when: rhel_08_wifi_enabled.stdout != "disabled"
        when: rhel_08_nmcli_available.rc == 0

      - name: "SCORED | 3.5 | PATCH | Ensure wireless interfaces are disabled | Disable wifi if enabled"
        command: nmcli radio all off
        become: true
        when: rhel_08_wifi_enabled is changed

  when:
      - rhel8cis_rule_3_5
  tags:
      - level1
      - level2
      - patch
      - rule_3.5

- name: "NOTSCORED | 3.6 | PATCH | Disable IPv6"
  replace:
      dest: /etc/default/grub
      regexp: '(^GRUB_CMDLINE_LINUX\s*\=\s*)(?:")(.+)(?<!ipv6.disable=1)(?:")'
      replace: '\1"\2 ipv6.disable=1"'
      follow: yes
  ignore_errors: yes
  notify: generate new grub config
  when:
      - not rhel8cis_ipv6_required
      - rhel8cis_rule_3_6
  tags:
      - level2
      - patch
      - rule_3.6
