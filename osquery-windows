{
  "platform": "windows",
  "queries": {   
    "drivers": {
      "query": "SELECT * FROM drivers;",
      "interval": 3600,
      "description": "List in-use Windows drivers"
    },    
    "programs": {
      "query": "SELECT * FROM programs;",
      "interval": 3600,
      "description": "Lists installed programs"
	 },
    "scheduled_tasks": {
      "query": "SELECT * FROM scheduled_tasks;",
      "interval": 3600,
      "description": "Lists all of the tasks in the Windows task scheduler"
    },
    "wmi_script_event_consumers": {
      "query": "SELECT * FROM wmi_script_event_consumers;",
      "interval": 3600,
      "description": "WMI ActiveScriptEventConsumer, which can be used for persistence on Windows. See https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf for more details."
    },
    "Users": {
      "query": "SELECT * FROM users;",
      "interval": 3600,
      "description": "Local system users."
    },
	
    "wmi_cli_event_consumers": {
      "query": "SELECT * FROM wmi_cli_event_consumers;",
      "interval": 3600,
      "description": "WMI CommandLineEventConsumer, which can be used for persistence on Windows. See https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf for more details."
    },
	
    "wmi_event_filters": {
      "query": "SELECT * FROM wmi_event_filters;",
      "interval": 3600,
      "description": "Lists WMI event filters."
    },
	
    "etc_hosts": {
      "query": "SELECT * FROM etc_hosts;",
      "interval": 3600,
      "description": "List the contents of the Windows hosts file"
    },
	
    "services": {
      "query": "SELECT * FROM services WHERE start_type='DEMAND_START' OR start_type='AUTO_START';",
      "interval": 3600,
      "description": "Lists all installed services configured to start automatically at boot"
    },
	
    "shared_resources": {
      "query": "SELECT * FROM shared_resources;",
      "interval": 3600,
      "description": "Displays shared resources on a computer system running Windows. This may be a disk drive, printer, interprocess communication, or other sharable device."
    },
    "StickyKeys_File_Replace_Backdoor": {
      "query": "SELECT * FROM hash WHERE (path='c:\\windows\\system32\\osk.exe' OR path='c:\\windows\\system32\\sethc.exe' OR path='c:\\windows\\system32\\narrator.exe' OR path='c:\\windows\\system32\\magnify.exe' OR path='c:\\windows\\system32\\displayswitch.exe') AND sha256 IN (SELECT sha256 FROM hash WHERE path='c:\\windows\\system32\\cmd.exe' OR path='c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe' OR path='c:\\windows\\system32\\explorer.exe') AND sha256!='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';",
      "interval": 60,
      "version": "2.2.1",
      "description": "Checks the hashes of accessibility tools to ensure they don't match the hashes of cmd.exe, powershell.exe, or explorer.exe. More info: (https://github.com/TrullJ/sticky-keys-scanner/blob/master/TestFor-StickyKey.ps1)"
    },
    "StickyKeys_Registry_Backdoor": {
      "query": "SELECT * FROM registry WHERE key LIKE 'HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\%%' and name='Debugger';",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Searches for the presence of the 'Debugger' registry key for common Windows accessibility tools. More info: (https://blogs.technet.microsoft.com/jonathantrull/2016/10/03/detecting-sticky-key-backdoors/)"
    },
    "conhost.exe_incorrect_path": {
      "query": "SELECT * FROM processes WHERE LOWER(name)='conhost.exe' AND LOWER(path)!='c:\\windows\\system32\\conhost.exe' AND path!='';",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Detect processes masquerading as legitimate Windows processes"
    },
    "dllhost.exe_incorrect_path": {
      "query": "SELECT * FROM processes WHERE LOWER(name)='dllhost.exe' AND LOWER(path)!='c:\\windows\\system32\\dllhost.exe' AND LOWER(path)!='c:\\windows\\syswow64\\dllhost.exe' AND path!='';",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Detect processes masquerading as legitimate Windows processes"
    },
    "lsass.exe_incorrect_path": {
      "query": "SELECT * FROM processes WHERE LOWER(name)='lsass.exe' AND LOWER(path)!='c:\\windows\\system32\\lsass.exe' AND path!='';",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Detect processes masquerading as legitimate Windows processes"
    },
    "services.exe_incorrect_parent_process": {
      "query": "SELECT name FROM processes WHERE pid=(SELECT parent FROM processes WHERE LOWER(name)='services.exe') AND LOWER(name)!='wininit.exe';",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Detect processes masquerading as legitimate Windows processes"
    },
    "svchost.exe_incorrect_path": {
      "query": "SELECT * FROM processes WHERE LOWER(name)='svchost.exe' AND LOWER(path)!='c:\\windows\\system32\\svchost.exe' AND LOWER(path)!='c:\\windows\\syswow64\\svchost.exe' AND path!='';",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Detect processes masquerading as legitimate Windows processes"
    },
    "svchost.exe_incorrect_parent_process": {
      "query": "SELECT name FROM processes WHERE pid=(SELECT parent FROM processes WHERE LOWER(name)='svchost.exe') AND LOWER(name)!='services.exe';",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Detect processes masquerading as legitimate Windows processes"
    },
    "SMBv1_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\SMB1' AND data!=0;",
      "interval": 3600,
      "version": "2.2.1",
      "description": "SMB1 registry key is not set correctly" 
    },
    "computer_password_change_disabled": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters\\DisablePasswordChange' AND data!=0;",
      "interval": 3600,
      "version": "2.2.1",
      "description": "Technique used by attackers to prevent computer accounts from changing their password, thus extending the life of Kerberos silver tickets (https://adsecurity.org/?p=2011)"
    },
    "winrm_misconfigured": {
      "query": "'SELECT * FROM registry WHERE (path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowBasic'' OR path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowCredSSP'' OR path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowUnencryptedTraffic'' OR path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowDigest'' OR path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowBasic'' OR path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowCredSSP'' OR path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowUnencryptedTraffic'' OR path=''HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\WinRS\\AllowRemoteShellAccess'') AND data!=0; '",
      "interval": 3600,
      "version": "2.2.1",
      "description": "The WIRM settings are not configured securely"
    },
    "physicaldll_registry_persistence": {
      "query": "SELECT key, path, name, mtime, username FROM registry r, users WHERE path LIKE 'HKEY_USERS\\'||uuid||'\\Software\\Microsoft\\SystemCertificates\\CA\\PhysicalStores\\%%' OR path LIKE 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllOpenStoreProv\\%%' AND name!='#16' AND name!='Ldap';",
      "interval": 3600,
      "description": "Detect a registry based persistence mechanism that allows an attacker to specify a DLL to be loaded when cryptographic libraries are called (https://twitter.com/PsiDragon/status/978367732793135105)"
    },
    "amsi_disabled_registry": {
      "query": "SELECT key, r.path, r.name, r.mtime, r.data, username from registry r, users WHERE path = 'HKEY_USERS\\'||uuid||'\\Software\\Microsoft\\Windows Script\\Settings\\AmsiEnable' AND data=0;",
      "interval": 3600,
      "description": "Registry key created to disable AMSI"
    },
    "computer_maximum_password_age_changed_registry": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters\\MaximumPasswordAge' and data!=30;",
      "interval": 3600,
      "description": "Controls how often to rotate the local computer password (defaults to 30 days)"
    },
    "runonceex_persistence_registry": {
      "query": "SELECT * FROM registry WHERE path = 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx';",
      "interval": 3600,
      "description": "Registry persistence to load DLLs and avoid autoruns detection"
    },
    "send_error_alert_registry_exists": {
      "query": "SELECT * FROM registry WHERE key='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\SendAlert';",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn't by default"
    }
  }
}
// select pid, local_address, local_port, remote_address, remote_port, state from process_open_sockets;

// select DISTINCT process.name, listening.port, process.pid from processes AS process JOIN listening_ports AS listening on process.pid = listening.pid WHERE listening.address = '0.0.0.0';

// select name,cmdline from processes;

// select DISTINCT process.name, process.pid, sockets.local_port, sockets.remote_port from processes AS process JOIN process_open_sockets AS sockets on process.pid = sockets.pid;
